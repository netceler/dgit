/*
 * This file is generated by jOOQ.
*/
package io.insight.jgit.jdbc.jooq.tables.records;


import io.insight.jgit.jdbc.jooq.tables.GitRefs;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GitRefsRecord extends UpdatableRecordImpl<GitRefsRecord> implements Record6<String, String, Byte, String, String, String> {

    private static final long serialVersionUID = 1762363317;

    /**
     * Setter for <code>test.git_refs.repo</code>.
     */
    public void setRepo(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>test.git_refs.repo</code>.
     */
    public String getRepo() {
        return (String) get(0);
    }

    /**
     * Setter for <code>test.git_refs.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>test.git_refs.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>test.git_refs.symbolic</code>.
     */
    public void setSymbolic(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>test.git_refs.symbolic</code>.
     */
    public Byte getSymbolic() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>test.git_refs.target</code>.
     */
    public void setTarget(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>test.git_refs.target</code>.
     */
    public String getTarget() {
        return (String) get(3);
    }

    /**
     * Setter for <code>test.git_refs.storage</code>.
     */
    public void setStorage(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>test.git_refs.storage</code>.
     */
    public String getStorage() {
        return (String) get(4);
    }

    /**
     * Setter for <code>test.git_refs.object_id</code>.
     */
    public void setObjectId(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>test.git_refs.object_id</code>.
     */
    public String getObjectId() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, Byte, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, Byte, String, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return GitRefs.GIT_REFS.REPO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return GitRefs.GIT_REFS.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field3() {
        return GitRefs.GIT_REFS.SYMBOLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return GitRefs.GIT_REFS.TARGET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return GitRefs.GIT_REFS.STORAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return GitRefs.GIT_REFS.OBJECT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getRepo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component3() {
        return getSymbolic();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getTarget();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getStorage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getObjectId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getRepo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value3() {
        return getSymbolic();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getTarget();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getStorage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getObjectId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitRefsRecord value1(String value) {
        setRepo(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitRefsRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitRefsRecord value3(Byte value) {
        setSymbolic(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitRefsRecord value4(String value) {
        setTarget(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitRefsRecord value5(String value) {
        setStorage(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitRefsRecord value6(String value) {
        setObjectId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitRefsRecord values(String value1, String value2, Byte value3, String value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GitRefsRecord
     */
    public GitRefsRecord() {
        super(GitRefs.GIT_REFS);
    }

    /**
     * Create a detached, initialised GitRefsRecord
     */
    public GitRefsRecord(String repo, String name, Byte symbolic, String target, String storage, String objectId) {
        super(GitRefs.GIT_REFS);

        set(0, repo);
        set(1, name);
        set(2, symbolic);
        set(3, target);
        set(4, storage);
        set(5, objectId);
    }
}
