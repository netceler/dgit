/*
 * This file is generated by jOOQ.
*/
package io.insight.jgit.jdbc.jooq.tables.records;


import io.insight.jgit.jdbc.jooq.tables.GitConfig;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GitConfigRecord extends UpdatableRecordImpl<GitConfigRecord> implements Record2<String, String> {

    private static final long serialVersionUID = -1507408226;

    /**
     * Setter for <code>test.git_config.repo</code>.
     */
    public void setRepo(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>test.git_config.repo</code>.
     */
    public String getRepo() {
        return (String) get(0);
    }

    /**
     * Setter for <code>test.git_config.config</code>.
     */
    public void setConfig(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>test.git_config.config</code>.
     */
    public String getConfig() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return GitConfig.GIT_CONFIG.REPO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return GitConfig.GIT_CONFIG.CONFIG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getRepo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getConfig();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getRepo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getConfig();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitConfigRecord value1(String value) {
        setRepo(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitConfigRecord value2(String value) {
        setConfig(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitConfigRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GitConfigRecord
     */
    public GitConfigRecord() {
        super(GitConfig.GIT_CONFIG);
    }

    /**
     * Create a detached, initialised GitConfigRecord
     */
    public GitConfigRecord(String repo, String config) {
        super(GitConfig.GIT_CONFIG);

        set(0, repo);
        set(1, config);
    }
}
