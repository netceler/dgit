/*
 * This file is generated by jOOQ.
 */
package io.insight.jgit.jdbc.jooq.tables.records;

import org.jooq.Field;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.TableRecordImpl;

import javax.annotation.Generated;

import io.insight.jgit.jdbc.jooq.tables.GitObjects;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org",
        "jOOQ version:3.10.6" }, comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GitObjectsRecord extends TableRecordImpl<GitObjectsRecord>
        implements Record7<String, String, Integer, byte[], String, Long, Long> {

    private static final long serialVersionUID = -542458432;

    /**
     * Setter for <code>test.git_objects.repo</code>.
     */
    public void setRepo(final String value) {
        set(0, value);
    }

    /**
     * Getter for <code>test.git_objects.repo</code>.
     */
    public String getRepo() {
        return (String) get(0);
    }

    /**
     * Setter for <code>test.git_objects.object_id</code>.
     */
    public void setObjectId(final String value) {
        set(1, value);
    }

    /**
     * Getter for <code>test.git_objects.object_id</code>.
     */
    public String getObjectId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>test.git_objects.type</code>.
     */
    public void setType(final Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>test.git_objects.type</code>.
     */
    public Integer getType() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>test.git_objects.data</code>.
     */
    public void setData(final byte... value) {
        set(3, value);
    }

    /**
     * Getter for <code>test.git_objects.data</code>.
     */
    public byte[] getData() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>test.git_objects.base</code>.
     */
    public void setBase(final String value) {
        set(4, value);
    }

    /**
     * Getter for <code>test.git_objects.base</code>.
     */
    public String getBase() {
        return (String) get(4);
    }

    /**
     * Setter for <code>test.git_objects.size</code>.
     */
    public void setSize(final Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>test.git_objects.size</code>.
     */
    public Long getSize() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>test.git_objects.total_size</code>.
     */
    public void setTotalSize(final Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>test.git_objects.total_size</code>.
     */
    public Long getTotalSize() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<String, String, Integer, byte[], String, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<String, String, Integer, byte[], String, Long, Long> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return GitObjects.GIT_OBJECTS.REPO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return GitObjects.GIT_OBJECTS.OBJECT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return GitObjects.GIT_OBJECTS.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field4() {
        return GitObjects.GIT_OBJECTS.DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return GitObjects.GIT_OBJECTS.BASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return GitObjects.GIT_OBJECTS.SIZE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field7() {
        return GitObjects.GIT_OBJECTS.TOTAL_SIZE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getRepo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getObjectId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component4() {
        return getData();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getBase();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component6() {
        return getSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component7() {
        return getTotalSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getRepo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getObjectId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value4() {
        return getData();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getBase();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value7() {
        return getTotalSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitObjectsRecord value1(final String value) {
        setRepo(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitObjectsRecord value2(final String value) {
        setObjectId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitObjectsRecord value3(final Integer value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitObjectsRecord value4(final byte... value) {
        setData(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitObjectsRecord value5(final String value) {
        setBase(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitObjectsRecord value6(final Long value) {
        setSize(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitObjectsRecord value7(final Long value) {
        setTotalSize(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GitObjectsRecord values(final String value1, final String value2, final Integer value3,
            final byte[] value4, final String value5, final Long value6, final Long value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GitObjectsRecord
     */
    public GitObjectsRecord() {
        super(GitObjects.GIT_OBJECTS);
    }

    /**
     * Create a detached, initialised GitObjectsRecord
     */
    public GitObjectsRecord(final String repo, final String objectId, final Integer type, final byte[] data,
            final String base, final Long size, final Long totalSize) {
        super(GitObjects.GIT_OBJECTS);

        set(0, repo);
        set(1, objectId);
        set(2, type);
        set(3, data);
        set(4, base);
        set(5, size);
        set(6, totalSize);
    }
}
